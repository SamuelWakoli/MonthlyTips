<resources>
    <string name="app_name">MonthlyTips</string>
    <!--    Titles-->
    <string name="title_1">Code Structure Matters</string>
    <string name="title_2">Version Control is Vital</string>
    <string name="title_3">Master a Debugging Tool</string>
    <string name="title_4">Keep Functions Short</string>
    <string name="title_5">Optimize for Readability</string>
    <string name="title_6">Learn a New Language Feature</string>
    <string name="title_7">Understand Data Structures</string>
    <string name="title_8">Follow Naming Conventions</string>
    <string name="title_9">Write Unit Tests</string>
    <string name="title_10">Explore Frameworks</string>
    <string name="title_11">Document Your Code</string>
    <string name="title_12">Regularly Refactor</string>
    <string name="title_13">Practice Algorithm Challenges</string>
    <string name="title_14">Code Reviews Matter</string>
    <string name="title_15">Explore Design Patterns</string>
    <string name="title_16">Learn Keyboard Shortcuts</string>
    <string name="title_17">Study Memory Management</string>
    <string name="title_18">Experiment with New Tools</string>
    <string name="title_19">Focus on Algorithm Efficiency</string>
    <string name="title_20">Practice Pair Programming</string>
    <string name="title_21">Read Source Code</string>
    <string name="title_22">Simplify Complex Code</string>
    <string name="title_23">Handle Exceptions Gracefully</string>
    <string name="title_24">Explore Functional Programming</string>
    <string name="title_25">Stay Current with Tech Trends</string>
    <string name="title_26">Experiment with APIs</string>
    <string name="title_27">Learn About DevOps</string>
    <string name="title_28">Improve UI/UX Skills</string>
    <string name="title_29">Contribute to Open Source</string>
    <string name="title_30">Reflect and Plan Ahead</string>


    <!--    Descriptions-->
    <string name="description_1">Plan your code's structure before diving in. Organized code is easier to maintain and understand.</string>
    <string name="description_2">Use version control tools like Git to track changes, collaborate, and roll back when needed.</string>
    <string name="description_3">Become proficient in a debugging tool like breakpoints or logging to identify and fix issues faster.</string>
    <string name="description_4">Limit functions to a single responsibility. Shorter functions are easier to comprehend and reuse.</string>
    <string name="description_5">Write code that's easy to read. Prioritize clarity over cleverness.</string>
    <string name="description_6">Regularly explore a new language feature to broaden your skillset.</string>
    <string name="description_7">Deepen your understanding of data structures; they're crucial for efficient algorithms.</string>
    <string name="description_8">Adhere to naming conventions to create consistent and understandable codebase.</string>
    <string name="description_9">Write tests as you code. They ensure your code behaves as expected and guards against regressions.</string>
    <string name="description_10">Try new frameworks to broaden your toolset and improve your problem-solving skills.</string>
    <string name="description_11">Write clear comments and documentation. Your future self (and others) will thank you.</string>
    <string name="description_12">Refactor code to improve readability, performance, and maintainability.</string>
    <string name="description_13">Solve algorithm problems to strengthen your logical thinking and problem-solving skills.</string>
    <string name="description_14">Participate in code reviews to learn from others and enhance code quality.</string>
    <string name="description_15">Understand and apply design patterns to solve common programming challenges.</string>
    <string name="description_16">Efficiently navigate your IDE using keyboard shortcuts. It saves time and boosts productivity.</string>
    <string name="description_17">Understand memory management to avoid memory leaks and optimize performance.</string>
    <string name="description_18">Stay up-to-date by experimenting with new tools, libraries, and techniques.</string>
    <string name="description_19">Strive for efficient algorithms to improve your code's runtime performance.</string>
    <string name="description_20">Pair programming fosters collaboration, knowledge sharing, and code quality.</string>
    <string name="description_21">Study open-source projects to learn from experienced developers' code.</string>
    <string name="description_22">Break down complex tasks into smaller, manageable functions.</string>
    <string name="description_23">Implement error handling to ensure your program doesn't crash unexpectedly.</string>
    <string name="description_24">Learn the concepts of functional programming and apply them where suitable.</string>
    <string name="description_25">Keep up with the latest technologies and trends to remain relevant in the industry.</string>
    <string name="description_26">Work with APIs to integrate external services into your applications.</string>
    <string name="description_27">Understand DevOps practices to improve collaboration between development and operations teams.</string>
    <string name="description_28">Enhance your UI/UX skills to create user-friendly and visually appealing applications.</string>
    <string name="description_29">Contribute to open-source projects to gain experience and give back to the community.</string>
    <string name="description_30">Reflect on your progress, identify areas for improvement, and plan your future programming goals.</string>
</resources>